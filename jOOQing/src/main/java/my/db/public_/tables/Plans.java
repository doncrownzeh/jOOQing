/*
 * This file is generated by jOOQ.
*/
package my.db.public_.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import my.db.public_.Keys;
import my.db.public_.Public;
import my.db.public_.tables.records.PlansRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Plans extends TableImpl<PlansRecord> {

    private static final long serialVersionUID = 1044925906;

    /**
     * The reference instance of <code>public.plans</code>
     */
    public static final Plans PLANS = new Plans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlansRecord> getRecordType() {
        return PlansRecord.class;
    }

    /**
     * The column <code>public.plans.id</code>.
     */
    public final TableField<PlansRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('plans_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.plans.name</code>.
     */
    public final TableField<PlansRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.plans.decription</code>.
     */
    public final TableField<PlansRecord, String> DECRIPTION = createField("decription", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.plans.date_added</code>.
     */
    public final TableField<PlansRecord, Date> DATE_ADDED = createField("date_added", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.plans.userid</code>.
     */
    public final TableField<PlansRecord, Integer> USERID = createField("userid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.plans</code> table reference
     */
    public Plans() {
        this(DSL.name("plans"), null);
    }

    /**
     * Create an aliased <code>public.plans</code> table reference
     */
    public Plans(String alias) {
        this(DSL.name(alias), PLANS);
    }

    /**
     * Create an aliased <code>public.plans</code> table reference
     */
    public Plans(Name alias) {
        this(alias, PLANS);
    }

    private Plans(Name alias, Table<PlansRecord> aliased) {
        this(alias, aliased, null);
    }

    private Plans(Name alias, Table<PlansRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PlansRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PLANS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlansRecord> getPrimaryKey() {
        return Keys.PLANS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlansRecord>> getKeys() {
        return Arrays.<UniqueKey<PlansRecord>>asList(Keys.PLANS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Plans as(String alias) {
        return new Plans(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Plans as(Name alias) {
        return new Plans(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Plans rename(String name) {
        return new Plans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Plans rename(Name name) {
        return new Plans(name, null);
    }
}
